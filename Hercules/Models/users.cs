//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hercules.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;

    public partial class users
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public users()
        {
            this.UserNotificationAcknowledgement = new HashSet<UserNotificationAcknowledgement>();
            this.userpasswords = new HashSet<userpasswords>();
        }

        public int Id { get; set; }
        public string Title { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }

        [Required(ErrorMessage = "Ingrese Usuario.")]
        public string Username { get; set; }
        [Required(ErrorMessage = "Ingrese Contraseña.")]
        public string Password { get; set; }

        public string PasswordHash { get; set; }
        public Nullable<System.DateTime> PasswordUpdated { get; set; }
        public Nullable<bool> Locked { get; set; }
        public Nullable<int> AccessFailedCount { get; set; }
        public Nullable<System.Guid> SessionId { get; set; }
        public Nullable<System.DateTime> SessionUpdated { get; set; }
        public Nullable<System.Guid> ForgotId { get; set; }
        public Nullable<System.DateTime> ForgotUpdated { get; set; }
        public string Email { get; set; }
        public string Mobile { get; set; }
        public int ParentAccount { get; set; }
        public Nullable<System.DateTime> DateCreated { get; set; }
        public Nullable<System.DateTime> LastLogin { get; set; }
        public Nullable<bool> LoggedIn { get; set; }
        public string Photo { get; set; }
        public Nullable<int> Role { get; set; }
        public Nullable<bool> RecieveNotifications { get; set; }
        public Nullable<int> AlarmForwardingMethod { get; set; }
        public Nullable<int> EmailNotificationMethod { get; set; }
        public Nullable<int> SMSNotificationMethod { get; set; }
        public Nullable<int> UserId { get; set; }
        public Nullable<int> MaxAlarmAgeMins { get; set; }
        public string IPAddress { get; set; }
        public Nullable<System.DateTime> ExpiryDate { get; set; }
        public Nullable<int> Language { get; set; }
        public Nullable<bool> RecieveSystemAlarms { get; set; }
        public Nullable<bool> RecieveAlarmClears { get; set; }
        public Nullable<int> DisplayAccMode { get; set; }
        public Nullable<bool> FlippedAccDisplay { get; set; }
        public Nullable<bool> Deactive { get; set; }
        public Nullable<System.Guid> EmailVerifiedId { get; set; }
        public Nullable<System.DateTime> EmailVerified { get; set; }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<UserNotificationAcknowledgement> UserNotificationAcknowledgement { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<userpasswords> userpasswords { get; set; }

        public bool ConfirmLogin(string username, string password)
        {
            hwmdbEntities db = new hwmdbEntities();
            try
            {
                var query = (from u in db.users
                             where u.Username.Equals(username) && u.Password.Equals(password)
                             select u).Count();

                return query == 1 ? true : false;
            }
            catch
            {
                return false;
            }
        }

        public users GetUser(int userId)
        {
            hwmdbEntities db = new hwmdbEntities();

            var query = (from dbu in db.users
                         where dbu.Id.Equals(userId)
                         select dbu).FirstOrDefault();

            users u = query;
            return u;
        }
    }
}
