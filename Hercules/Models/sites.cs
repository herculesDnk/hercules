//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hercules.Models
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public partial class sites
    {
        public int ID { get; set; }
        public Nullable<int> DatagateID { get; set; }
        public Nullable<int> OwnerAccount { get; set; }
        public string SiteID { get; set; }
        public string Address { get; set; }
        public string Address2 { get; set; }
        public string LatEast { get; set; }
        public string LongNorth { get; set; }
        public string HeightAOD { get; set; }
        public Nullable<int> LoggerID { get; set; }
        public Nullable<System.DateTime> CreateDate { get; set; }
        public Nullable<System.DateTime> UpdateDate { get; set; }
        public Nullable<System.DateTime> StartDate { get; set; }
        public Nullable<System.DateTime> EndDate { get; set; }
        public string Notes { get; set; }
        public string MaintenceNotes { get; set; }
        public Nullable<int> quietdays { get; set; }
        public Nullable<int> IntelligentAlarmStatusFlags { get; set; }
        public Nullable<int> PipeSize { get; set; }
        public Nullable<int> PipeMaterial { get; set; }
        public Nullable<bool> ValueLidModified { get; set; }
        public Nullable<int> ValveLidSize { get; set; }
        public Nullable<bool> maintenanceflag { get; set; }
        public Nullable<int> ChamberType { get; set; }
        public Nullable<int> QuietMins { get; set; }
        public Nullable<bool> IsQuiet { get; set; }
        public Nullable<bool> LeakState { get; set; }

        public sites GetSite(int siteId)
        {
            hwmdbEntities db = new hwmdbEntities();
            return db.sites.Where(s => s.ID == siteId).FirstOrDefault();
        }

        public List<sites> GetSites(int userId)
        {
            List<sites> sitesList = new List<sites>();
            List<int> idSitesList = GetIdSitesList(userId);

            try
            {
                foreach (var item in idSitesList)
                {
                    sitesList.Add(GetSite(item));
                }
                return sitesList;
            }
            catch
            {
                return null;
            }
        }

        private List<int> GetIdSitesList(int userId)
        {
            hwmdbEntities db = new hwmdbEntities();
            List<int> idSites = new List<int>();

            accounts a = new accounts();
            List<int> idAccountList = a.GetIdAccountList(userId);

            try
            {
                if (idAccountList.Count() != 0)
                {
                    foreach (var item in idAccountList)
                    {
                        //Consulta que devuelve una lista de sites asociados a la lista anterior, comparando ID
                        var subquery = db.sites.Where(s => s.OwnerAccount == item).ToList();

                        foreach (var obj in subquery)
                        {
                            idSites.Add(obj.ID);
                        }
                    }
                    return idSites;
                }
                else
                {
                    return null;
                }
            }
            catch
            {
                return null;
            }

        }
    }
}
